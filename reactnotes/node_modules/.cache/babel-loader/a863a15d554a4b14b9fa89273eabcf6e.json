{"ast":null,"code":"var _jsxFileName = \"/home/hamza/react-firebase-notes-app/reactnotes/src/App.js\";\nimport React, { Component } from \"react\";\nimport Note from \"./Note/Note\";\nimport NoteForm from \"./NoteForm/NoteForm\";\nimport \"./App.css\";\nimport firebase from \"./config.js\"; // import firebase from \"firebase/app\";\n\nimport \"firebase/database\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addNote = note => {\n      firebase.database().ref().push().set({\n        noteContent: note\n      });\n    };\n\n    this.removeNote = noteId => {\n      firebase.database().ref().child().remove(noteId);\n    };\n\n    this.app = firebase;\n    this.db = this.app.database().ref().child(\"notes\");\n    this.state = {\n      notes: []\n    };\n  }\n\n  componentWillMount() {\n    const previousNote = this.state.notes;\n    firebase.database().ref().on(\"child_added\", snap => {\n      previousNote.push({\n        id: snap.key,\n        noteContent: snap.val().noteContent\n      });\n      this.setState({\n        notes: previousNote\n      });\n    });\n    firebase.database().ref().on(\"child_removed\", snap => {\n      for (var i = 0; i < previousNote.length; i++) {\n        if (previousNote[i].id === snap.key) {\n          previousNote.splice(i, 1);\n        }\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"notesWrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"notesHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"heading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"React & Firebase To-Do List\")), React.createElement(\"div\", {\n      className: \"notesBody\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.state.notes.map(note => {\n      return React.createElement(Note, {\n        noteContent: note.noteContent,\n        noteId: note.noteId,\n        key: note.noteId,\n        removeNote: this.removeNote,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      });\n    })), React.createElement(\"div\", {\n      className: \"notesFooter\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(NoteForm, {\n      addNote: this.addNote,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/hamza/react-firebase-notes-app/reactnotes/src/App.js"],"names":["React","Component","Note","NoteForm","firebase","App","constructor","props","addNote","note","database","ref","push","set","noteContent","removeNote","noteId","child","remove","app","db","state","notes","componentWillMount","previousNote","on","snap","id","key","val","setState","i","length","splice","render","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,aAArB,C,CACA;;AACA,OAAO,mBAAP;;AAEA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1BK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAyCnBC,OAzCmB,GAyCTC,IAAI,IAAI;AAChBL,MAAAA,QAAQ,CACLM,QADH,GAEGC,GAFH,GAGGC,IAHH,GAIGC,GAJH,CAIO;AAAEC,QAAAA,WAAW,EAAEL;AAAf,OAJP;AAKD,KA/CkB;;AAAA,SAiDnBM,UAjDmB,GAiDNC,MAAM,IAAI;AAErBZ,MAAAA,QAAQ,CAACM,QAAT,GAAoBC,GAApB,GAA0BM,KAA1B,GAAkCC,MAAlC,CAAyCF,MAAzC;AACD,KApDkB;;AAEjB,SAAKG,GAAL,GAAWf,QAAX;AAEA,SAAKgB,EAAL,GAAU,KAAKD,GAAL,CACPT,QADO,GAEPC,GAFO,GAGPM,KAHO,CAGD,OAHC,CAAV;AAIA,SAAKI,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE;AADI,KAAb;AAGD;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,UAAMC,YAAY,GAAG,KAAKH,KAAL,CAAWC,KAAhC;AACAlB,IAAAA,QAAQ,CACLM,QADH,GAEGC,GAFH,GAGGc,EAHH,CAGM,aAHN,EAGqBC,IAAI,IAAI;AACzBF,MAAAA,YAAY,CAACZ,IAAb,CAAkB;AAChBe,QAAAA,EAAE,EAAED,IAAI,CAACE,GADO;AAEhBd,QAAAA,WAAW,EAAEY,IAAI,CAACG,GAAL,GAAWf;AAFR,OAAlB;AAKA,WAAKgB,QAAL,CAAc;AACZR,QAAAA,KAAK,EAAEE;AADK,OAAd;AAGD,KAZH;AAcApB,IAAAA,QAAQ,CACLM,QADH,GAEGC,GAFH,GAGGc,EAHH,CAGM,eAHN,EAGuBC,IAAI,IAAI;AAC3B,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,YAAY,CAACQ,MAAjC,EAAyCD,CAAC,EAA1C,EAA8C;AAC5C,YAAIP,YAAY,CAACO,CAAD,CAAZ,CAAgBJ,EAAhB,KAAuBD,IAAI,CAACE,GAAhC,EAAqC;AACnCJ,UAAAA,YAAY,CAACS,MAAb,CAAoBF,CAApB,EAAuB,CAAvB;AACD;AACF;AACF,KATH;AAUD;;AAeDG,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCADF,CADF,EAIE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKb,KAAL,CAAWC,KAAX,CAAiBa,GAAjB,CAAqB1B,IAAI,IAAI;AAC5B,aACE,oBAAC,IAAD;AACE,QAAA,WAAW,EAAEA,IAAI,CAACK,WADpB;AAEE,QAAA,MAAM,EAAEL,IAAI,CAACO,MAFf;AAGE,QAAA,GAAG,EAAEP,IAAI,CAACO,MAHZ;AAIE,QAAA,UAAU,EAAE,KAAKD,UAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAQD,KATA,CADH,CAJF,EAgBE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,OAAO,EAAE,KAAKP,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAhBF,CADF;AAsBD;;AA9EyB;;AAiF5B,eAAeH,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Note from \"./Note/Note\";\nimport NoteForm from \"./NoteForm/NoteForm\";\nimport \"./App.css\";\nimport firebase from \"./config.js\";\n// import firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.app = firebase;\n\n    this.db = this.app\n      .database()\n      .ref()\n      .child(\"notes\");\n    this.state = {\n      notes: []\n    };\n  }\n\n  componentWillMount() {\n    const previousNote = this.state.notes;\n    firebase\n      .database()\n      .ref()\n      .on(\"child_added\", snap => {\n        previousNote.push({\n          id: snap.key,\n          noteContent: snap.val().noteContent\n        });\n\n        this.setState({\n          notes: previousNote\n        });\n      });\n\n    firebase\n      .database()\n      .ref()\n      .on(\"child_removed\", snap => {\n        for (var i = 0; i < previousNote.length; i++) {\n          if (previousNote[i].id === snap.key) {\n            previousNote.splice(i, 1);\n          }\n        }\n      });\n  }\n\n  addNote = note => {\n    firebase\n      .database()\n      .ref()\n      .push()\n      .set({ noteContent: note });\n  };\n\n  removeNote = noteId => {\n\n    firebase.database().ref().child().remove(noteId);\n  };\n\n  render() {\n    return (\n      <div className=\"notesWrapper\">\n        <div className=\"notesHeader\">\n          <div className=\"heading\">React & Firebase To-Do List</div>\n        </div>\n        <div className=\"notesBody\">\n          {this.state.notes.map(note => {\n            return (\n              <Note\n                noteContent={note.noteContent}\n                noteId={note.noteId}\n                key={note.noteId}\n                removeNote={this.removeNote}\n              />\n            );\n          })}\n        </div>\n        <div className=\"notesFooter\">\n          <NoteForm addNote={this.addNote} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}